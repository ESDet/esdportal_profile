<?php
/**
 * @file
 * Code for the esdportal_str feature.
 */

include_once 'esdportal_str.features.inc';

/**
 * Implements hook_entity_info_alter().
 *
 * Add some view modes
 */
function esdportal_str_entity_info_alter(&$entity_info) {
  $entity_info['taxonomy_term']['view modes']['aside'] = array(
    'label' => t('Aside'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * Add template hints for the added view modes
 */
function esdportal_str_preprocess_taxonomy_term(&$vars) {
  if($vars['view_mode'] == 'aside') {
    $vars['theme_hook_suggestions'][] = 'taxonomy_term__' . $vars['type'] . '__aside';
  }
}

/**
 * Implements hook_permission().
 *
 * Define permission to allow editing field_school term ref.
 */
function esdportal_str_permission() {
  return array(
    'view own field_school' => array('title' => t('View own field_school')),
    'edit own field_school' => array('title' => t('Edit own field_school')),
    'view any field_school' => array('title' => t('View any field_school')),
    'edit any field_school' => array('title' => t('Edit any field_school')),
  );
}

/**
 * Implements hook_field_access().
 *
 * Only allow users with administrator or logistics coordinator roles to update
 * field_school taxnonomy reference.
 *
 * (follows field_permission_example module)
 */
function esdportal_str_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_school') {
    // allow superusers no matter whoziewhatsit
    if (user_access('bypass node access') || user_access('administer content types')) {
      return TRUE;
    }
    $context = 'any';
    if ($entity_type == 'node' && $entity && $entity->uid == $account->uid) {
      $context = 'own';
    }
    $perm = $op . ' ' . $context . ' field_school';
    $access = user_access($perm, $account);
    return $access;
  }
  return TRUE;
}

