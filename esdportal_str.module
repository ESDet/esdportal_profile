<?php
/**
 * @file
 * Code for the esdportal_str feature.
 */

include_once 'esdportal_str.features.inc';

/**
 * Implements hook_entity_info_alter().
 *
 * Add some view modes
 */
function esdportal_str_entity_info_alter(&$entity_info) {
  $entity_info['taxonomy_term']['view modes']['aside'] = array(
    'label' => t('Aside'),
    'custom settings' => FALSE,
  );
  $entity_info['node']['view modes']['sitevisitask'] = array(
    'label' => t('Site visit ask'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_preprocess_taxonomy_term().
 *
 * Add template hints for the added view modes
 */
function esdportal_str_preprocess_taxonomy_term(&$vars) {
  if($vars['view_mode'] == 'aside') {
    $vars['theme_hook_suggestions'][] = 'taxonomy_term__' . $vars['type'] . '__aside';
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Add template hints for the added view modes
 */
function esdportal_str_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'sitevisitask') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__sitevisitask';
  }
}

/**
 * Implements hook_permission().
 *
 * Define permission to allow editing field_school and field_site_visit_status
 * term ref.
 */
function esdportal_str_permission() {
  return array(
    'view own field_school' => array('title' => t('View own field_school')),
    'edit own field_school' => array('title' => t('Edit own field_school')),
    'view any field_school' => array('title' => t('View any field_school')),
    'edit any field_school' => array('title' => t('Edit any field_school')),
    'view own field_site_visit_status' => array('title' => t('View own field_site_visit_status')),
    'edit own field_site_visit_status' => array('title' => t('Edit own field_site_visit_status')),
    'view any field_site_visit_status' => array('title' => t('View any field_site_visit_status')),
    'edit any field_site_visit_status' => array('title' => t('Edit any field_site_visit_status')),
    'view own field_site_visit_available_dates' => array('title' => t('View own field_site_visit_available_dates')),
    'edit own field_site_visit_available_dates' => array('title' => t('Edit own field_site_visit_available_dates')),
    'view any field_site_visit_available_dates' => array('title' => t('View any field_site_visit_available_dates')),
    'edit any field_site_visit_available_dates' => array('title' => t('Edit any field_site_visit_available_dates')),
  );
}

/**
 * Implements hook_field_access().
 *
 * Special perms for:
 * * field_school taxnonomy reference
 * * field_site_visit_status taxnonomy reference
 * * field_site_visit_available_dates field
 *
 * (follows field_permission_example module)
 */
function esdportal_str_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'field_school') {
    // allow superusers no matter whoziewhatsit
    if (user_access('bypass node access') || user_access('administer content types')) {
      return TRUE;
    }
    $context = 'any';
    if ($entity_type == 'node' && $entity && $entity->uid == $account->uid) {
      $context = 'own';
    }
    $perm = $op . ' ' . $context . ' field_school';
    $access = user_access($perm, $account);
    return $access;
  }
  if ($field['field_name'] == 'field_site_visit_status') {
    // allow superusers no matter whoziewhatsit
    if (user_access('bypass node access') || user_access('administer content types')) {
      return TRUE;
    }
    $context = 'any';
    if ($entity_type == 'node' && $entity && $entity->uid == $account->uid) {
      $context = 'own';
    }
    $perm = $op . ' ' . $context . ' field_site_visit_status';
    $access = user_access($perm, $account);
    return $access;
  }
  if ($field['field_name'] == 'field_site_visit_available_dates') {
    // allow superusers no matter whoziewhatsit
    if (user_access('bypass node access') || user_access('administer content types')) {
      return TRUE;
    }
    $context = 'any';
    if ($entity_type == 'node' && $entity && $entity->uid == $account->uid) {
      $context = 'own';
    }
    $perm = $op . ' ' . $context . ' field_site_visit_available_dates';
    $access = user_access($perm, $account);
    return $access;
  }
  // TODO: only show field_site_visit_reuse_reason and field_site_visit_unavailability for specific states
  return TRUE;
}

/**
 * Feedback form, for use in footer.
 */
function esdportal_str_form() {
  $form['intro'] = array(
    '#markup' => t('Please provide us with any feedback or ideas you have about this site for us to continue improving it for you.'),
  );
  $form['comments'] = array(
    '#type' => 'textarea',
    '#rows' => 4,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function esdportal_str_form_submit($form, &$form_state) {
  global $user;

  $vals = $form_state['values'];

  $module = 'esdportal_str';
  $key = 'feedback';
  $from = variable_get('site_mail', 'eanderson@excellentschoolsdetroit.org');

  $message = drupal_mail($module, $key, $to, language_default(), $vals, $from, FALSE);
  $message['subject'] = t('Portal feedback from user @username', array('@username' => $user->name));
  $message['body'] = t('@name wrote:', array('@name' => $user->name)) . "\n\n" . $vals['comments'];
  $message['body'] .= "\n\n--\n" . t('Submitted by user @user from @url', array('@user' => $user->name, '@url' => $_SERVER['REQUEST_URI']));

  $system = drupal_mail_system($module, $key);

  $message['result'] = $system->mail($message);


  if ($message['result'] == TRUE) {
    drupal_set_message(t('Thank you for providing feedback.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your feedback.'), 'error');
  }
}

/**
 * Implements hook_block_info().
 */
function esdportal_str_block_info() {
  return array(
    'feedback' => array(
      'info' => 'Feedback form',
      'cache' => DRUPAL_CACHE_PER_ROLE,
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Feedback form block
 */
function esdportal_str_block_view($delta = '') {
  switch ($delta) {
    case 'feedback':
    default:
      $block['subject'] = t('Feedback');
      $block['content'] = drupal_get_form('esdportal_str_form');
    break;
  }
  return $block;
}

/**
 * Implements hook_views_pre_build().
 *
 * Alter data_ui views field handlers to output NULLs as empty rather than 0.
 */
function esdportal_str_views_pre_build(&$view) {
  /*
  if ($view->export_module = 'data_ui') {
    foreach ($view->field as $handler) {
      $handler->options['empty_zero'] = FALSE;
      $handler->options['hide_empty'] = TRUE;
    }
  }
  */
}

/**
 *
 */
function esdportal_str_field_widget_form_alter(&$element, &$form_state, $context) {
  $is_sitevisitask = (isset($element['#field_name']) && $element['#field_name'] == 'field_site_visit_status');
  $is_privileged = user_access('edit any field_site_visit_status');

  // only show if it's our field and you're not privileged
  if ($is_sitevisitask && !$is_privileged) {
    // add our special validator to the defaults
    $element['#element_validate'][] = '_esdportal_str_sitevisitask_field_widget_validate';
    // if not an admin, rewrite available opts
    $status = _esdportal_str_get_sitevisitstatus($element['#entity']);
    $opts = _esdportal_str_get_sitevisitstatus_options($status);
    drupal_add_js(drupal_get_path('module', 'esdportal_str') . '/esdportal_str.sitevisitask.js');
    $element['#title'] = $opts['prompt'];
    $element['#options'] = $opts['options'];
    if (isset($opts['disabled']) && $opts['disabled'] == true) {
      $element['#disabled'] = true;
    }
  }
}

function esdportal_str_field_widget_properties_alter(&$widget, $context) {
  // TODO: validate per site visit status state
}

/**
 * Custom validator for sitevisitask options
 * modeled after options_field_widget_validate().
 */
function _esdportal_str_sitevisitask_field_widget_validate($element, &$form_state) {
  // TODO: validate per site visit status state
}

/**
 * Get site visit status tid of school_profile $node.
 *
 * @param object $node
 *   A school_profile node
 * @return integer tid
 *   A site_visit_status term id
 */
function _esdportal_str_get_sitevisitstatus($node) {
  $tid = $node->field_site_visit_status['und'][0]['tid'];
  return $tid;
}

/**
 * Get potential options for a given current site visit status value
 *
 * @param integer $tid
 *   A site_visit_status term id
 * @return array $options
 *   An array of potential next-step information
 */
function _esdportal_str_get_sitevisitstatus_options($tid) {
  switch ($tid) {
    case 1: // Previously visited, pending response
      $options = array(
        'prompt' => 'Use 2013 site visit scores for your school?',
        // Yes, Mature, 9; No, Revisit, 16, show field_site_visit_reuse_reason
        'options' => array(
          '_none' => 'Please choose...',
          9 => 'Yes',
          16 => 'No',
        ),
        'actions' => array(
          9 => '',
        ),
        'showblock' => true,
      );
      break;
    case 5: // Not participating
      $options = array(
        'prompt' => 'Does your school want to have a 2014 site visit?',
        // Yes, New, pending ESD month choice, 2; No, Opt out, 8
        'options' => array(
          '_none' => 'Please choose...',
          2 => 'Yes',
          8 => 'No',
        ),
        'showblock' => true,
      );
      break;
    case 15: // Participating, pending date selection
      $options = array(
        'prompt' => 'Please select any days that your school CANNOT have a site visit.',
        // blank, Participating, pending date selection, 15, show field_site_visit_unavailability
        'options' => array(
          15 => 'Please choose dates...',
          12 => 'Dates chosen!',
        ),
        'actions' => null,
        'disabled' => true,
        'showblock' => true,
      );
      break;
    default:
      $options = array(
        'prompt' => 'Thank you for your response!',
        'options' => null,
        'actions' => array(

        ),
        'showblock' => false,
      );
      break;
  }
  return $options;
}

